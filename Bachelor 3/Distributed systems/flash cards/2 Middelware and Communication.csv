"Define middleware in distributed systems and explain its three main roles.","Middleware is software that sits between applications and the operating system/network, providing transparency, a standard way of interaction, and integration of heterogeneous components."
"Explain the difference between local invocation and remote invocation in terms of object reference and method accessibility.","Local invocation uses direct object references within one address space and allows all public methods. Remote invocation requires remote object references, restricts accessible methods to a remote interface, and involves additional communication overhead."
"Describe the role of sockets in establishing basic communication in distributed systems.","Sockets are OS-provided abstractions for inter-process communication, defined by a 4-tuple (ip_src, port_src, ip_dst, port_dst), enabling processes to send and receive data over a network."
"Illustrate with an example how a client-server architecture is implemented using Java sockets.","In Java, a client uses `Socket` to connect to a server at a given IP and port, sends requests via output streams, and receives responses via input streams. The server uses `ServerSocket` to accept client connections, processes input, and replies via output streams."
"List and explain the three invocation semantics in RMI/RPC fault tolerance.","The semantics are: (1) Maybe: no guarantee the call executes, (2) At-least-once: ensures execution but may be multiple times, (3) At-most-once: ensures execution once at most, avoiding duplicates."
"Discuss three common fault tolerance measures in RMI/RPC communication.","1) Retry-request message (resend if no reply), 2) Duplicate request filtering (avoid re-executing same request), 3) Retransmission of results (either re-execute or resend stored reply)."
"Compare the roles of Proxy and Skeleton in Remote Method Invocation.","The proxy (client-side) marshals requests and unmarshals replies, making remote calls appear local. The skeleton (server-side) unmarshals requests, invokes the method on the object, marshals results, and sends them back."
"Define marshalling and describe two techniques commonly used in middleware.","Marshalling is the transformation of in-memory objects into a bitstream for transmission. Techniques include standardized formats (e.g., CORBAâ€™s CDR, Java serialization) and sender-specific formats with included specifications (e.g., Google Protocol Buffers)."
"Explain the role of the dispatcher in the RMI architecture.","The dispatcher receives incoming requests, identifies the appropriate method using the method ID, and forwards the request to the correct skeleton for execution."
"Describe the structure of a remote object reference and its purpose.","A remote object reference uniquely identifies a remote object across a distributed system using components like IP address, port number, process creation time, object number, and remote interface type."
"Explain the difference between proxies generated by middleware and manually written proxies.","Middleware-generated proxies are automatically created from an Interface Definition Language (IDL), ensuring consistency and reducing developer effort, while manually written proxies require explicit coding of marshaling and communication logic."
"Describe the role of the remote reference module in middleware.","The remote reference module translates between local and remote object references and maintains a table of references for proxies (client-side) and remote objects (server-side)."
"Explain the purpose and functioning of a binding service in middleware.","A binding service acts as a dictionary that maps object names to remote object references, enabling clients to discover and connect to remote services without direct server knowledge."
"Describe the main layers of middleware architecture and their responsibilities.","Layers: (1) Request-reply protocol for communication, (2) External data representation for marshalling, (3) RPC/RMI layer for abstraction, enabling applications to invoke remote services seamlessly."
"Using the example of a remote `add(int i, int j)` method, outline the full sequence of steps in RMI execution.","Steps: Define remote interface, implement method, middleware generates proxies, client invokes proxy, request is marshaled and sent, skeleton receives and unmarshals, server executes method, result marshaled and returned, client proxy unmarshals and delivers result."
"Explain why middleware hides complexity but still requires the programmer to be aware of remote objects.","Middleware abstracts communication, marshalling, and fault tolerance, but programmers must still consider remote-specific issues like network latency, partial failures, and invocation semantics."
"Compare request-reply communication in middleware with direct socket programming.","Request-reply communication abstracts socket handling, message formatting, and fault tolerance, while direct sockets require manual handling of connections, message framing, and retransmissions."
"Describe two failure modes that can occur during RPC execution and how middleware mitigates them.","Examples: (1) Lost request: middleware retries with a new message; (2) Crash before reply: middleware can retransmit results or re-execute requests depending on semantics."
"Provide pseudocode showing how a proxy marshals and forwards a request in RMI.","Pseudocode: `proxy.method(args){ msg = marshal(objRef, methodID, args); send(msg); reply = receive(); return unmarshal(reply); }`."
"Explain why external data representation standards are important in heterogeneous distributed systems.","They ensure interoperability across different architectures, allowing objects and data types to be serialized and deserialized consistently, regardless of machine or language differences."
