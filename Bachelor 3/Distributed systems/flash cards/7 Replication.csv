"Explain two main reasons why replication is used in distributed systems and provide an example for each.","Replication improves performance (e.g., load balancing across multiple servers, reducing latency via geographically distributed replicas) and availability (e.g., ensuring data remains accessible despite node failures)."
"Describe how replication contributes to fault tolerance in the presence of corrupt data. What is the role of the voting system?","Replication protects against data corruption by majority voting. With 2f+1 replicas, the system can tolerate f corrupt replicas, accepting results if a majority agree."
"Identify and explain two key challenges associated with maintaining replication in distributed systems.","(1) Ensuring consistency across replicas introduces synchronization overhead; (2) Updates increase bandwidth and communication costs, especially under high write loads."
"State the CAP theorem and discuss its implications in distributed systems.","The CAP theorem states that a distributed system cannot simultaneously guarantee Consistency, Availability, and Partition tolerance. In practice, designers must choose between optimizing consistency or availability under network partitions."
"Provide a real-world example of how a distributed system chooses between consistency and availability, referencing CAP trade-offs.","Google App Engine’s Datastore offered a high-availability mode (with weaker consistency guarantees) or a strong consistency mode (with higher latency)."
"Define strict consistency and explain why it is often impractical in real distributed systems.","Strict consistency requires all replicas to reflect updates instantly with global time ordering, ensuring each read returns the most recent write. It is impractical due to synchronization delays and clock limitations."
"Compare sequential consistency with strict consistency. Provide an example scenario where sequential consistency is acceptable but strict consistency is not.","Sequential consistency ensures operations appear in the same order across processes, but allows delays. Example: Bank transfers across multiple branches may tolerate sequential ordering without requiring instantaneous strict consistency."
"Explain causal consistency and illustrate with an example of causally related operations.","Causal consistency ensures causally related operations are observed in the same order by all processes. For instance, if Process A posts a message and Process B replies, all replicas must display A’s post before B’s reply."
"Define PRAM (FIFO) consistency and explain how it differs from causal consistency.","PRAM consistency ensures writes from a single process are seen in order but does not enforce order across processes. Causal consistency enforces order only when operations are causally dependent."
"Explain the concept of weak consistency and how it uses synchronization variables.","Weak consistency relaxes consistency guarantees by grouping operations around synchronization points. Updates propagate only upon synchronization, reducing overhead but delaying consistency."
"Differentiate between release consistency and lazy release consistency.","Release consistency propagates updates at release points, ensuring consistency before the next acquire. Lazy release consistency delays propagation until another acquire is performed, improving efficiency but risking stale data."
"Describe entry consistency and explain how it associates synchronization variables with specific data items.","Entry consistency ties synchronization variables to specific guarded data items. Acquiring a variable ensures only the associated data is updated locally, reducing unnecessary updates."
"Summarize the key differences between strong and weak data-centric consistency models, naming at least two from each category.","Strong: Strict, Sequential, Causal. Weak: PRAM/FIFO, Weak, Release, Entry. Strong models enforce global order, while weak models rely on synchronization and allow partial ordering."
"Explain why client-centric consistency models are useful in environments with unreliable network connectivity.","They guarantee user-perceived consistency (e.g., monotonic reads, read-your-writes), reducing anomalies for clients who frequently switch between replicas while tolerating weaker global guarantees."
"Define eventual consistency and provide a practical example.","Eventual consistency means all replicas converge if no new updates occur. Example: Facebook wall posts eventually appear across all servers even if temporarily inconsistent."
"Explain monotonic-read consistency and provide an example application where it is essential.","Monotonic-read ensures once a client sees a value, future reads return the same or newer values. Example: DNS lookups, where once a domain resolves to an IP, clients should not see older mappings."
"Describe monotonic-write consistency and give a practical use case.","Monotonic-write requires a process’s writes to be applied in order. Example: software version control ensures updates are applied sequentially to avoid overwriting newer commits."
"Define read-your-writes consistency and explain why it is important for user-facing applications.","Read-your-writes ensures a process always sees its own latest updates. Example: when a user changes a password, subsequent logins must reflect the new value immediately."
"Explain writes-follow-reads consistency and provide an example scenario.","Writes-follow-reads ensures writes are based on the latest read values. Example: Posting a comment on a webpage requires the comment to attach to the latest retrieved version of the page."
"Discuss the trade-offs between consistency, performance, and scalability in replication. Provide one example of a system design choice.","Higher consistency requires more communication, reducing performance and scalability. Example: NoSQL databases often relax consistency to improve availability and performance across large clusters."
