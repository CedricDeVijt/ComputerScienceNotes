"Define the three desirable properties (safety, liveness, fairness) for coordination in distributed systems. Explain why each is important.","Safety ensures at most one process enters a critical section; liveness ensures every request eventually succeeds (no deadlock or starvation); fairness ensures access requests are granted in happened-before order, preventing unfair advantages."
"Explain the role of evaluation metrics (bandwidth, client delay, synchronization delay) when analyzing distributed mutual exclusion algorithms.","Bandwidth measures communication cost; client delay measures time to enter/exit critical sections in unloaded systems; synchronization delay measures waiting time between consecutive accesses in loaded systems. Together, they evaluate efficiency and scalability."
"Describe the centralized mutual exclusion algorithm and explain how it ensures safety and liveness.","A single server manages access by granting a token to requesting processes. Safety is ensured by maintaining a single token variable; liveness is guaranteed as each leave operation dequeues the next waiting request, ensuring progress."
"Compare the efficiency of the centralized server algorithm versus the ring-based algorithm in terms of message complexity.","Centralized: 2 messages per entry, 1 per leave (O(1)); Ring-based: average (N+1)/2 messages per entry, always consumes bandwidth even without requests. Centralized scales poorly (bottleneck), ring scales better but less efficient per entry."
"Explain how the ring-based mutual exclusion algorithm works and why fairness is not guaranteed.","A unique token circulates in a logical ring; a process enters CS only when holding the token. Fairness is not guaranteed since order of access depends on token arrival, not on the happened-before order of requests."
"Describe the Ricart–Agrawala algorithm and explain how Lamport clocks are used.","Processes multicast requests with Lamport timestamps; access is granted after receiving replies from all other processes. Lamport clocks order requests globally to enforce fairness and prevent simultaneous entry."
"Provide pseudocode for the entry and exit procedures of the Ricart–Agrawala algorithm.","Entry: set state=Wanted, multicast Request(T,ID), wait for N-1 replies, enter CS. Exit: set state=Released, send Reply to all pending requests. Request handling: if Held or request has lower timestamp, enqueue, else reply immediately."
"List two advantages and one disadvantage of the Ricart–Agrawala algorithm compared to the centralized approach.","Advantages: avoids single point of failure, provides fairness via logical clocks. Disadvantage: high message complexity (2N-1 messages per entry)."
"Describe the main idea of Maekawa’s voting algorithm and how voting sets are constructed.","Each process requests permission from a subset of processes (voting set) before entering CS. Voting sets are constructed such that any two intersect, ensuring mutual exclusion. Typically, K ≈ √N processes per voting set."
"Why can Maekawa’s algorithm lead to deadlocks? How can Lamport clocks help mitigate this?","Deadlock occurs if processes hold votes but wait for others, forming circular waits. Lamport clocks impose total ordering of requests, breaking ties and preventing indefinite waiting."
"Compare the synchronization delay of Centralized, Ring, Ricart–Agrawala, and Maekawa algorithms.","Centralized: 2δ; Ring: (N+1)δ/2; Ricart–Agrawala: δ; Maekawa: 2δ. Ricart–Agrawala minimizes synchronization delay, while ring delay grows linearly with N."
"Define the election problem in distributed systems and state its safety and liveness requirements.","Problem: select one coordinator process with highest ID; safety: all processes agree on same coordinator; liveness: election eventually terminates with a result."
"Explain the Chang–Roberts (ring-based) election algorithm, including message flow.","Processes circulate Election(ID) messages; each forwards higher IDs and may replace lower ones. When a message returns to its originator, that process declares itself elected and circulates Elected(ID)."
"Analyze the message complexity of the Chang–Roberts algorithm in best, worst, and average cases.","Best: 2N messages; Worst: (3N-1) messages; Average: (5N-1)/2 messages. Complexity grows linearly with N."
"Explain how the Bully algorithm detects coordinator failure and starts a new election.","Processes detect coordinator failure via timeouts. A process sends Election messages to higher-ID processes; if no reply, it declares itself coordinator and notifies others; otherwise, it waits for a coordinator message."
"Compare the Bully algorithm with Chang–Roberts in terms of failure handling.","Bully handles failures using timeouts (synchronous assumption), while Chang–Roberts assumes no failures. Bully tolerates crashes but requires knowledge of higher-ID processes, unlike ring-based algorithm."
"Why can duplicate coordinator announcements occur in the Bully algorithm?","If a crashed process with the highest ID recovers, it may announce itself as coordinator, while the second-highest process may already have declared itself. This results in duplicate announcements."
"Given N=9 processes, construct voting sets for Maekawa’s algorithm using a 3x3 matrix arrangement.","Arrange processes in 3x3 grid. Voting set of pi = row + column containing pi. Example: V1={p1,p2,p3,p4,p7}, V5={p2,p5,p8,p4,p6}. Each set intersects with others."
"Discuss the tradeoff between fairness and efficiency in distributed mutual exclusion algorithms.","Centralized ensures fairness via queue but risks bottleneck. Ring ensures distributed control but fairness is weak. Ricart–Agrawala ensures fairness but at high message cost. Maekawa reduces messages but risks deadlock without ordering."
"Summarize the main differences between election algorithms (Chang–Roberts vs. Bully) and mutual exclusion algorithms (Centralized, Ring, Ricart–Agrawala, Maekawa).","Election selects a single coordinator; mutual exclusion controls access to critical sections. Chang–Roberts assumes no failures, Bully tolerates crashes. Centralized is simple but bottlenecked; Ring is symmetric but unfair; Ricart–Agrawala ensures fairness; Maekawa reduces complexity but risks deadlock."
